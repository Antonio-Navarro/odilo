package com.antoniojnavarro.pruebaodilo.controllers;

import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor;
import org.springframework.scheduling.config.ScheduledTask;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.antoniojnavarro.pruebaodilo.tasks.TareasProgramadas;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
@RestController
@RequestMapping("/pruebaodilo/tests")
public class JobRestController {

	@Value("${initial.delay}")
	String delay;

	@Autowired
	TareasProgramadas tareasProgramadas;

	@Autowired
	private ScheduledAnnotationBeanPostProcessor postProcessor;

	@Autowired
	ObjectMapper objectMapper;

	@GetMapping("/mensaje")
	public String index() throws InterruptedException {
		Thread.sleep(10000L);

		return "hola es una prueba" + delay;
	}

	@PostMapping("/1")
	public String mostrarJobs() throws InterruptedException {
		postProcessor.postProcessBeforeDestruction(tareasProgramadas, "tareasProgramadas");
		return "Tareas paradas con exito";
	}

	@GetMapping(value = "/arrancarTareas")
	public String startSchedule() {
		postProcessor.postProcessAfterInitialization(tareasProgramadas, "tareasProgramadas");
		return "Tareas arrancadas con exito";
	}

	@GetMapping(value = "/1")
	public String listSchedules() throws JsonProcessingException {
		Set<ScheduledTask> setTasks = postProcessor.getScheduledTasks();
		if (!setTasks.isEmpty()) {
			return objectMapper.writeValueAsString(setTasks);
		} else {
			return "!Actualmente no hay tareas en ejecuci√≥n!";
		}
	}
}
